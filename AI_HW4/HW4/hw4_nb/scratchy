with open(traindat, 'r') as fd:
    for category in id:
        id_wrds = (category, word)
    print(id_wrds)


def read_wrd:
    for line in fd.readlines():
        id, *word = line.split()
    return id, word




    try:
        list_of_categories_and_their_P[category].append(list_of_categories_appearing_in_training_data.count(category))
    except KeyError:
        list_of_categories_and_their_P[category]list_of_categories_appearing_in_training_data.count(category)

    # def count_wrd(wrd,)
    #
    #
    # def add_prb(dictionary,item,id):
    #     try:
    #         dictionary[id].append(item)
    #     except KeyError:
    #         dictionary[id] = item



    if category not in list_of_categories_and_their_P:
        list_of_categories_and_their_P[category]=list_of_categories_appearing_in_training_data.count(category)
    else:
        list_of_categories_and_their_P[[category],++1]
    return list_of_categories_and_their_P


listy.append(id)
        print(list(set(listy)))
        # for category in id:
        #     print(category)



# try:
            
#         except KeyError:
#             dictionary[id] = item


#
# def calc_prob(x,y):
#     prob=x/y
#     return prob



total_instances_of_each_word.append(one_word)
        total_instances_of_that_word = [one_word, wrd.count(one_word)]
        total_instances_of_each_word.append(total_instances_of_that_word)






IMPORTANT: 
    # print(Pvj)

        #print(list_of_categories_and_their_P)
            # calc_prob(count_wrds(word))

# def calc_Pvj(category):
#     list_of_categories_appearing_in_training_data.append(category)
#     total_number_of_category_instances = len(list_of_categories_appearing_in_training_data)
#     list_of_categories_and_their_P[category] = list_of_categories_appearing_in_training_data.count(category)
#     for category in list_of_categories_and_their_P:
#         Pvj[category] = list_of_categories_and_their_P[category] / total_number_of_category_instances
#     return Pvj















import sys
from copy import deepcopy
dict = {}
Pvj = {}
listy = []
total_instances_of_each_word = []
probability_of_each_word_given_cateogry = {}
list_of_categories_and_their_P = {}
list_of_categories_appearing_in_training_data = []
def learn(traindat):
    '''Load data for training; adding to
    dictionary of classes and counting words.'''
    with open(traindat,'r') as fd:
        for line in fd.readlines():
            id, *word = line.split()
            count_wrds_in_category(id,word,uniq_wrd(word))



def count_wrds_in_category(category,wrd,unique_wrd):
    total_word_count = len(wrd)
    for one_word in unique_wrd[1]:
        probability = wrd.count(one_word)/total_word_count
        probability_of_each_word_given_cateogry[category] = probability
    return 

def update_dictionary(dict,new_values)


    
def uniq_wrd(wrd):
    list_of_all_unique_words_in_line = list(set(wrd))
    return list_of_all_unique_words_in_line 




learn("/Users/sahalfhussain/Desktop/AI_HW4/HW4/hw4_nb/testy.txt")









def add_wrd_by_category(category,wrds):
    for wrd in wrds:
        try: 
            wrd_instance_by_category[[wrd_and_their_probailities_by_category[wrd]]] += 1
        except KeyError:
            wrd_instance_by_category[[wrd_and_their_probailities_by_category[wrd]]] = 1
    return wrd_instance_by_category


except KeyError:
            wrd_and_their_probailities_by_category[wrd] 
            wrd_instance_by_category[wrd] = [wrd_and_their_probailities_by_category[]





def add_word_inst(category,wrds):                                       #adds the words to a dictionary that holds instances of a word that appear in the whole document
    for wrd in wrds:                                                    #also adds the word to a dictionary containing all the instances of the word according to the category 
        try:                                                            
            word_and_their_instances[wrd] +=1
            wrd_instance_by_category[wrd][category] += 1
            wrd_instance_by_category[wrd][total_instance] += 1
        except KeyError:
            word_and_their_instances[wrd] = 1
            try:
                wrd_instance_by_category[wrd].update({category:1})
            except KeyError:
                wrd_instance_by_category[wrd] = {category:1}
            
    return word_and_their_instances,wrd_instance_by_category









# def add_wrd_by_category(category,wrds):
#     for wrd in wrds:
#         try: 
#             wrd_instance_by_category[wrd][category] += 1
#         except KeyError:
#             try:
#                 wrd_instance_by_category[wrd].update({category:1})
#             except KeyError:
#                 wrd_instance_by_category[wrd] = {category:1}
#     return wrd_instance_by_category

def calc_Pvj(category): 
    try:
        categories_and_their_instances[category] += 1
    except KeyError:
        categories_and_their_instances[category] = 1
    return categories_and_their_instances



# def give_second_dectionary(dictionary,key):
#     return dictionary[key]
    

# def calculate_probability_of_each_word(total_instance_of_wrd_in_document,total_instance_in_category):
#     for word_instance_in_doc in total_instance_of_wrd_in_document:
        
    
    
    
    
#     return wrd_and_their_probailities_by_category













def runTest(testdat):                                                             #runs the test file and calculates the probability and prints the result
    def calculate_probability_of_words(wrds,category):
        probability_of_wrds = 1.0
        probability_of_wrds_given_category = {}
        category_without_total_instance = deepcopy(category)
        del category_without_total_instance["total_categories"]
        for categories in category_without_total_instance:
            for wrd in wrds:
                try:
                    probability_of_wrd = (wrd_instance_by_category[wrd][categories])/wrd_instance_by_category[wrd]["total_instance"]
                except KeyError:
                    probability_of_wrd = small_float
            probability_of_wrds *= probability_of_wrd
            
            probability_of_wrds_given_category[probability_of_wrds] =  categories
        # print(probability_of_wrds_given_category)
        return probability_of_wrds_given_category         #[max(probability_of_wrds_given_category.keys())]
    
    with open(testdat,'r') as fd:
        for line in fd.readlines():
            id, *word = line.split()
            distinct_words_in_line = list(set(word))
            calculate_probability_of_words(distinct_words_in_line,categories_and_their_instances)












 # def calculate_probability_of_words(wrds,category):
    #     probability_of_wrds = 1.0
    #     probability_of_wrd = 0.0
    #     category_without_total_instance = deepcopy(category)
    #     del category_without_total_instance["total_instances_of_categories"]
    #     for categories in category_without_total_instance:
    #         print(category_without_total_instance)
    #         for wrd in wrds:
    #             probability_of_wrd = (categories_and_their_instances[categories]["instances_of_category"]/categories_and_their_instances["total_instances_of_categories"]) * ((wrd_instance_by_category[wrd][categories])/categories_and_their_instances[categories]["total_inumber_of_words_in_category"])
    #         probability_of_wrds *= probability_of_wrd
    #         probability_of_wrds_given_category[probability_of_wrds] =  categories
    #         # probability_of_wrds_given_category[max(probability_of_wrds_given_category.keys())]
    #     return probability_of_wrds_given_category





































        def calculate_right(assumed_category, correct_category):
        global total_categories
        global number_right
        total_categories +=  1
        if assumed_category == correct_category:
            try:
                number_right[correct_category] += 1
            except KeyError:
                number_right.update({correct_category:1})
        return number_right

    def calculate_precentage_of_categories_in_test(category):
        global number_category
        try:
            number_category[category] += 1
        except KeyError:
            number_category = {category:1}
        return number_category

    
    def calculate_percentage_right(total,right):
        global i
        for category in total:
            try:
                percentage_right = {category:(total[category]/right[category])}
            except KeyError:
                percentage_right = {category:0}
        for category2 in percentage_right:
            i += percentage_right[category2]
        average_percentage_right = (i/len(percentage_right))